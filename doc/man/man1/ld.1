.Dd December 8, 2006
.Dt ld 1
.Os Darwin
.Sh NAME
.Nm ld
.Nd "linker"
.Sh SYNOPSIS
.Nm
files... 
.Op options 
.Op Fl o Ar outputfile 
.Sh DESCRIPTION
The
.Nm ld
command combines several object files and libraries, resolves references, and
produces an ouput file. 
.Nm ld
can produce a final linked image (executable, dylib, or bundle), or with the -r
option, produce another object file.  If the -o option is not used, the output
file produced is named "a.out".
.Ss Universal
The linker accepts universal (multiple-architecture) input files, but
always creates a "thin" (single-architecture), standard Mach-O output file.
The architecture for the output file is specified using the -arch option.  
If this option is not used,
.Nm ld
attempts to determine the output architecture by examining the object
files in command line order.  The first "thin"
architecture determines that of the output file.  If no input
object file is a "thin" file, the native 32-bit architecture for the host is used.
.Pp
Usually, 
.Nm ld
is not used directly.  Instead the 
.Xr gcc(1)
compiler driver invokes
.Nm ld.
The compiler driver can be passed multiple -arch options and it will create a 
universal final linked image by invoking 
.Nm ld
multiple times and then running
.Xr lipo(1)
merge the outputs into a universal file.
.Ss Layout
The object files are loaded in the order in which they are specified on the
command line.  The segments and the sections in those segments will appear in 
the output file in the order they are encountered in the object files being linked. 
All zero fill sections will appear after all non-zero fill sections in their segments.
Sections created from files with the -sectcreate option will be laid out at after 
sections from .o files. The use of the -order_file option will alter the layout 
rules above, and move the symbols specified to start of their section.
.Ss Libraries
A static library (aka static archive) is a collection of .o files with a table of contents
that lists the global symbols in the .o files. 
.Nm ld
will only pull .o files out of a static library if needed to resolve some symbol reference.
Unlike traditional linkers, 
.Nm ld
will continually search a static library while linking. There is no need to specify a static
library multiple times on the command line.  
.Pp
A dynamic library (aka dylib or framework) is a final linked image.  Putting a dynamic
library on the command line causes two things: 1) The generated final linked image 
will have encoded that it depends on that dynamic library. 2) Exported symbols from the
dynamic library are used to resolve references.  
.Pp
Both dynamic and static libraries are searched as they appear on the command line.  
.Ss Search paths
.Nm ld
maintains a list of directories to search for a library or framework to use.  The default
library search path is /usr/lib then /usr/local/lib.  The -L option will add a new library search
path.  The default framework search path is /Library/Frameworks then /System/Library/Frameworks.
The -F option will a new framework search path.  The -Z option will remove
the standard search paths.  The -syslibroot option will prepend a prefix to all search
paths.
.Ss Two-level namespace
By default all references resolved to a dynamic library record the library to which 
they were resolved. At runtime, dyld uses that information to directly resolve
symobls.  The alternative is to use the -flat_namespace option.  With flat namespace,
the library is not recorded.  At runtime, dyld will search each dynamic library in load
order when resolving symbols. This is slower, but more like how other operating systems 
resolve symbols. 
.Ss Indirect dynamic libraries
If the command line specifies to link against dylib A, and when dylib A was built it linked
against dylib B, then B is considered an indirect dylib.  
When linking for two-level namespace, ld does not look at indirect dylibs, except when 
re-exported by a direct dylibs.  On the other hand when linking for flat namespace, 
ld does load all indirect dylibs and uses them to resolve references.
Even though indirect dylibs are specified via a full path, 
.Nm ld
first uses the specified search paths to locate each indirect dylib.  If one cannot
be found using the search paths, the full path is used.
.Ss Dynamic libraries undefines
When linking for two-level namespace, 
.Nm ld 
does not verify that undefines in dylibs actually
exist.  But when linking for flat namespace, 
.Nm ld
does check that all undefines from all loaded dylibs have a matching definition.  
This is sometimes used to force selected functions to be loaded from a static library.
.Sh OPTIONS
.Ss Options that control the kind of output
.Bl -tag
.It Fl execute
The default.  Produce a mach-o main executable that has file type MH_EXECUTE.
.It Fl dylib
Produce a mach-o shared library that has file type MH_DYLIB.
.It Fl bundle
Produce a mach-o bundle that has file type MH_BUNDLE.
.It Fl r
Merges object files to produce another mach-o object file with file type MH_OBJECT.  
.It Fl dylinker
Produce a mach-o dylinker that has file type MH_DYLINKER.  Only used when building dyld.
.It Fl dynamic
The default.  Implied by -dynamiclib, -bundle, or -execute
.It Fl static
Produces a mach-o file that does not use the dyld.  Only used building the kernel. 
.It Fl arch Ar arch_name
Specifies which architecture (e.g. ppc, ppc64, i386, x86_64) the output file should be.
.It Fl o Ar path
Specifies the name and location of the output file.  If not specified, `a.out' is used.
.El
.Ss Options that control libraries
.Bl -tag
.It Fl l Ns x
This option tells the linker to search for libx.dylib or libx.a in the library search path.
If string x is of the form y.o, then that file is searched for in the same places, but without
prepending `lib' or appending `.a' or `.dylib' to the filename.
.It Fl weak-l Ns Ar x
This is the same as the -lx but forces the library and all references to it to be marked as weak imports.
That is, the library is allowed to be missing at runtime.
.It Fl weak_library Ar path_to_library
This is the same as listing a file name path to a library on the link line except that it forces the
library and all references to it to be marked as weak imports. 
.It Fl reexport-l Ns Ar x
This is the same as the -lx but specifies that the all symbols in library x should be available to 
clients linking to the library being created.  This was previously done with a separate -sub_library option.
.It Fl reexport_library Ar path_to_library
This is the same as listing a file name path to a library on the link line and it specifies that the 
all symbols in library path should be available to clients linking to the library being created.
This was previously done with a separate -sub_library option.
.It Fl L Ns dir
Add 
.Ar dir 
to the list of directories in which to search for libraries. 
Directories specified with -L are searched in the order they appear on the command line
and before the default search path.
.It Fl Z
Do not search the standard directories when searching for libraries and frameworks.
.It Fl syslibroot Ar rootdir
Prepend 
.Ar rootdir 
to all search paths when searching for libraries or frameworks.
.It Fl search_paths_first
By default the -lx and -weak-lx options first search for a file of the form `libx.dylib' in each directory
in the library search path, then a file of the form `libx.a' is searched for in the library search paths.
This option changes it so that in each path `libx.dylib' is searched for then `libx.a' before the 
next path in the library search path is searched.
.It Fl framework Ar name[,suffix]
This option tells the linker to search for `name.framework/name' the framework search path.
If the optional suffix is specified the framework is first searched for the name with the suffix and then without
(e.g. look for `name.framework/name_suffix' first).
.It Fl weak_framework Ar name[,suffix]
This is the same as the -framework name[,suffix] but forces the framework and all 
references to it to be marked as weak imports. 
.It Fl reexport_framework Ar name[,suffix]
This is the same as the -framework name[,suffix] but also specifies that the 
all symbols in that framework should be available to clients linking to the library being created.
This was previously done with a separate -sub_umbrella option.
.It Fl F Ns dir
Add 
.Ar dir
to the list of directories in which to search for frameworks. 
Directories specified with -F are searched in the order they appear on the command line
and before the default search path.
.It Fl all_load
Loads all members of static archive libraries.
.It Fl ObjC
Loads all members of static archive libraries that implement an Objective-C class or category.
.El
.Ss Options that control additional content
.Bl -tag
.It Fl sectcreate Ar segname sectname file
The section 
.Ar sectname 
in the segment 
.Ar segname 
is created from the contents of file 
.Ar file. 
The combination of segname and sectname must be unique Ð there cannot already be a section (segname,sectname) 
from any other input.
.It Fl filelist Ar file[,dirname]
Specifies that the linker should link the files listed in 
.Ar file . 
This is an alternative to listing the files on the command line. 
The file names are listed one per line separated only by newlines. (Spaces and tabs are assumed to be part of the file name.)
If the optional directory name, 
.Ar dirname 
is specified, it is prepended to each name in the list file.
.It Fl dtrace Ar file
Enables dtrace static probes when producing a final linked image.  The file 
.Ar file
must be a DTrace script which declares the static probes.
.El
.Ss Options that control optimizations
.Bl -tag
.It Fl dead_strip
Remove functions and data that are unreachable by the entry point or exported symbols.  
.It Fl dead_strip_dylibs
Remove dylibs that are unreachable by the entry point or exported symbols. That is,  
suppresses the generation of load command commands for dylibs which supplied no
symbols during the link. This option should not be used when linking against a dylib which 
is required at runtime for some indirect reason such as the dylib has an important initializer.
.It Fl order_file Ar file
Alters the order in which functions and data are laid out.  For each section in the output file,
any symbol in that section that are specified in the order file 
.Ar file
is moved to the start of its section and laid out in the same order as in the order file 
.Ar file .
Order files are text files with one symbol name per line.  Lines starting with a # are comments.
A symbol name may be optionally preceded with its object file leafname and a colon (e.g. foo.o:_foo). 
This is useful for static functions/data that occur in multiple files. 
A symbol name may also be optionally preceded with the architecture (e.g. ppc:_foo or ppc:foo.o:_foo).
This enables you to have one order file that works for multiple architectures. 
Literal c-strings may be ordered by by quoting the string (e.g. "Hello, world\\n") in the order file.
.It Fl macosx_version_min Ar version
This is set to indicate the oldest Mac OS X version that that the output is to be used on.  Specifying
a later version enables the linker to assumes features of that OS in the output file.  The format of
.Ar version
is a Mac OS X version number such as 10.4 or 10.5
.It Fl image_base Ar address
Specifies the perferred load address for a dylib or bundle. The argument
.Ar address
is a hexadecimal number with an optional leading 0x.  By choosing non-overlapping address for all
dylibs and bundles that a program loads, launch time can be improved because dyld will not need to
"rebase" the image (that is, adjust pointers within the image to work at the loaded address).
It is often easier to not use this option, but instead use the rebase(1) tool, and give it a list of dylibs.  
It will then choose non-overlapping addresses for the list and rebase them all.
This option is also called -seg1addr for compatibility.
.El
.Ss Options when creating a dynamic library (dylib)
.Bl -tag
.It Fl install_name Ar name
Sets an internal "install path" (LC_ID_DYLIB) in a dynamic library. Any clients linked against the library 
will record that path as the way dyld should locate this library.  If this option is not specified, then 
the -o path will be used.  This option is also called -dylib_install_name for compatibility.
.It Fl compatibility_version Ar number
Specifies the compatibility version number of the library.  When a library is loaded by dyld, the 
compatibility version is checked and if the program's version is greater that the library's version, it is an error.
The format of 
.Ar number 
is X[.Y[.Z]] where X must be a positive non-zero number less than or equal to 65535, 
and .Y and .Z are optional and if present must be non-negative numbers less than or equal to 255. 
If the compatibility version number is not specified, it has a value of 0 and no checking is done when the library is used. 
This option is also called -dylib_compatibility_version for compatibility.
.It Fl current_version Ar number
Specifies the current version number of the library. The current version of the library can be obtained 
programmatically by the user of the library so it can determine exactly which version of the library it is using. 
The format of 
.Ar number 
is X[.Y[.Z]] where X must be a positive non-zero number less than or equal to 65535, 
and .Y and .Z are optional and if present must be non-negative numbers less than or equal to 255. 
If the version number is not specified, it has a value of 0.
This option is also called -dylib_current_version for compatibility.
.El
.Ss Options when creating a main executable
.Bl -tag
.It Fl pie
This makes a special kind of main executable that is position independent (PIE).  On Mac OS X 10.5, the OS
will load a PIE at a random address each time it is executed.  You cannot create a PIE from .o files compiled 
with -mdynamic-no-pic.  That means the codegen is less optimal, but the address randomization adds some 
security. 
.It Fl pagezero_size Ar size
By default the linker creates an unreadable segment starting at address zero named __PAGEZERO.  Its existence
will cause a bus error if a NULL pointer is dereferenced.  The argument
.Ar size
is a hexadecimal number with an optional leading 0x.  If  
.Ar size
is zero, the linker will not generate a page zero segment.  By default on 32-bit architectures the page zero size 
is 4KB.  On 64-bit architectures, the default size if 4GB.  The ppc64 architecture has some special cases. Since Mac
OS X 10.4 did not support 4GB page zero programs, the default page zero size for ppc64 will be 4KB unless 
-macosx_version_min is 10.5 or later.  Also, the -mdynamic-no-pic codegen model for ppc64 will only work if the
code is placed in the lower 2GB of the address space, so the if the linker detects any such code, the page zero
size is set to 4KB and then a new unredable trailing segment is created after the code, filling up the lower 4GB.
.It Fl stack_size Ar size
Specifies the maximum stack size for the main thread in a program.  Without this option a program has a 8MB stack.
The argument
.Ar size
is a hexadecimal number with an optional leading 0x. The 
.Ar size
should be an even multiple of 4KB, that is the last three hexadecimal digits should be zero.
.It Fl allow_stack_execute 
Marks executable so that all stacks in the task will be given stack execution privilege. This includes pthread stacks.
.El
.Ss Options when creating a bundle
.Bl -tag
.It Fl bundle_loader Ar executable
This specifies the 
.Ar executable 
that will be loading the bundle output file being linked. 
Undefined symbols from the bundle are checked against the specified 
.Ar executable 
like it was one of the 
dynamic libraries the bundle was linked with.
.El
.Ss Options when creating an object file
.Bl -tag
.It Fl keep_private_externs
Don't turn private external (aka visibility=hidden) symbols into static symbols, 
but rather leave them as private external in the resulting object file.
.It Fl d
Force definition of common symbols.  That is, transform tentative defintions into real definitions.
.El
.Ss Options that control symbol resolution
.Bl -tag
.It Fl exported_symbols_list Ar filename
The specified 
.Ar filename 
contains a list of global symbol names that will remain as global symbols in the output file. 
All other global symbols will be treated as if they were marked as __private_extern__ (aka visibility=hidden) 
and will not be global in the output file. The symbol names listed in filename must be one per line.
Leading and trailing white space are not part of the symbol name. 
Lines starting with # are ignored, as are lines with only white space.
Some wildcards (similar to shell file matching) are supported.  The * matches zero or more characters.
The ? matches one character.  [abc] matches one character which must be an 'a', 'b', or 'c'.  [a-z] matches
any single lower case letter from 'a' to 'z'. 
.It Fl exported_symbol Ar symbol
The specified 
.Ar symbol
is added to the list of global symbols names that will remain as global symbols in the output file.  This 
option can be used multiple times.  For short lists, this can be more convenient than creating a file and using 
-exported_symbols_list.
.It Fl unexported_symbols_list Ar file
The specified 
.Ar filename 
contains a list of global symbol names that will not remain as global symbols in the output file. 
The symbols will be treated as if they were marked as __private_extern__ (aka visibility=hidden) and will not be global
in the output file. The symbol names listed in filename must be one per line. 
Leading and trailing white space are not part of the symbol name. 
Lines starting with # are ignored, as are lines with only white space.
Some wildcards (similar to shell file matching) are supported.  The * matches zero or more characters.
The ? matches one character.  [abc] matches one character which must be an 'a', 'b', or 'c'.  [a-z] matches
any single lower case letter from 'a' to 'z'. 
.It Fl unexported_symbol Ar symbol
The specified 
.Ar symbol
is added to the list of global symbols names that will not remain as global symbols in the output file.  This 
option can be used multiple times.  For short lists, this can be more convenient than creating a file and using 
-unexported_symbols_list.
.It Fl alias Ar symbol_name Ar alternate_symbol_name
Create an alias named 
.Ar alternate_symbol_name
for the symbol
.Ar symbol_name .
By default the alias symbol has global visibility.  This option was previous the -idef:indir option.
.It Fl alias_list Ar filename
The specified 
.Ar filename
contains a list of aliases. The symbol name and its alias are on one line, separated by whitespace.
Lines starting with # are ignored.
.It Fl flat_namespace 
Alters how symbols are resolved at build time and runtime.  With -two_levelnamespace (the default), the linker
only searches dylibs on the command line for symbols, and records in which dylib they were found.  With -flat_namespace, 
the linker searches all dylibs on the command line and all dylibs those original dylibs depend on.  The linker
does not record which dylib an external symbol came from, so at runtime dyld again searches all images and uses
the first definition it finds.  In addition, any undefines in loaded flat_namespace dylibs must be resolvable
at build time.  
.It Fl u Ar symbol_name
Specified that symbol 
.Ar symbol_name
must be defined for the link to succeed.  This is useful to force selected functions to be loaded
from a static library.
.It Fl U Ar symbol_name
Specified that it is ok for 
.Ar symbol_name
to have no definition.  With -two_levelnamespace, the resulting symbol will be marked dynamic_lookup which
means dyld will search all loaded images.
.It Fl undefined Ar treatment
Specifies how undefined symbols are to be treated. Options are: error, warning, suppress, or dynamic_lookup.  The
default is error. 
.It Fl rpath Ar path
Add 
.Ar path
to the runpath search path list for image being created.  At runtime, dyld uses the runpath when searching
for dylibs whose load path begins with @rpath/.
.El
.Ss Options for introspecting the linker
.Bl -tag
.It Fl why_load
Log why each object file in a static library is loaded. That is, what symbol was needed.  Also called -whyload
for compatibility.
.It Fl why_live Ar symbol_name
Logs a chain of references to 
.Ar symbol_name .
Only applicable with -dead_strip .
It can help debug why something that you think should be dead strip removed is not removed.
.It Fl print_statistics
Logs information about the amount of memory and time the linker used.
.It Fl t
Logs each file (object, archive, or dylib) the linker loads.  Useful for debugging problems with search paths where the wrong library is loaded.
.It Fl whatsloaded
Logs just object files the linker loads.
.It Fl order_file_statistics
Logs information about the processing of a -order_file.
.It Fl map Ar map_file_path
Writes a map file to the specified path which details all symbols and their addresses in the output image.
.El
.Ss Options for controling symbol table optimizations
.Bl -tag
.It Fl S
Do not put debug information (STABS or DWARF) in the output file.
.It Fl x
Do not put non-global symbols in the output file's symbol table. Non-global symbols are useful when debugging and
getting symbol names in back traces, but are not used at runtime.
.It Fl non_global_symbols_strip_list Ar filename
The specified 
.Ar filename 
contains a list of non-global symbol names that should be removed from the output file's symbol table.  All other 
non-global symbol names will remain in the output files symbol table. See -exported_symbols_list for syntax and use
of wildcards.
.It Fl non_global_symbols_no_strip_list Ar filename
The specified 
.Ar filename 
contains a list of non-global symbol names that should be remain in the output file's symbol table.  All other 
symbol names will be removed from the output file's symbol table. See -exported_symbols_list for syntax and use
of wildcards.
.El
.Ss Rarely used Options
.Bl -tag
.It Fl v
Prints the version of the linker.
.It Fl no_uuid
Do not generate an LC_UUID load command in the output file.
.It Fl root_safe
Sets the MH_ROOT_SAFE bit in the mach header of the output file.
.It Fl setuid_safe
Sets the MH_SETUID_SAFE bit in the mach header of the output file.
.It Fl interposable
Indirects access to all to exported symbols when creating a dynamic library.  
.It Fl init Ar symbol_name
The specified symbol_name will be run as the first initializer.   Only used when creating a dynamic library.  
.It Fl sub_library Ar library_name
The specified dylib will be re-exported. For example the library_name for /usr/lib/libobjc_profile.A.dylib would be libobjc. 
Only used when creating a dynamic library.  
.It Fl sub_umbrella Ar framework_name
The specified framework will be re-exported.  Only used when creating a dynamic library. 
.It Fl allowable_client Ar name
Restricts what can link against the dynamic library being created.  
.It Fl client_name Ar name
Enables a bundle to link against a dylib that was built with -allowable_client.  
The name specified must match one of the -allowable_client names specified when the dylib was created.
.It Fl umbrella Ar framework_name
Specifies that the dylib being linked is re-exported through an umbrella framework of the specified name.
.It Fl headerpad Ar size
Specifies the minimum space for future expansion of the load commands.  Only useful if intend to run 
install_name_tool to alter the load commands later. Size is a hexadecimal number.
.It Fl headerpad_max_install_names
Automatically adds space for future expansion of load commands such that all paths could expand to MAXPATHLEN. 
Only useful if intend to run install_name_tool to alter the load commands later. Size is a hexadecimal number.
.It Fl bind_at_load
Sets a bit in the mach header of the resulting binary which tells dyld to bind all symbols when the binary is loaded, rather than lazily.
.It Fl force_flat_namespace
Sets a bit in the mach header of the resulting binary which tells dyld to not only use flat namespace for the binary,
but force flat namespace binding on all dylibs and bundles loaded in the process.  Can only be used when linking main executables.
.It Fl sectalign Ar segname Ar sectname Ar value
The section named sectname in the segment segname will have its alignment set to value, where value is a hexadecimal 
number that must be an integral power of 2. 
.It Fl stack_addr Ar address
Specifies the initial address of the stack pointer value, where value is a hexadecimal number rounded to a page boundary.
.It Fl segprot Ar segname Ar max_prot Ar init_prot
Specifies the maximum and initial virtual memory protection of the named segment, name, to be max and init ,respectively. 
The values for max and init are any combination of the characters `r' (for read), `w' (for write), `x' (for execute) and `-' (no access).
.It Fl seg_addr_table Ar filename
Specifies a file containing base addresses for dynamic libraries.  Each line of the file is a hexadecimal base address 
followed by whitespace then the install name of the corresponding dylib. The # character denotes a comment.
.It Fl segs_read_write_addr Ar address
Allows a dynamic library to be built where the read-only and read-write segments are not contiguous.  The address 
specified is a hexadecimal number that indicates the base address for the read-write segments.
.It Fl segs_read_only_addr Ar address
Allows a dynamic library to be built where the read-only and read-write segments are not contiguous.  The address 
specified is a hexadecimal number that indicates the base address for the read-only segments.
.It Fl segaddr Ar name Ar address
Specifies the starting address of the segment named name to be address. The address must be a hexadecimal number 
that is a multiple of 4K page size.
.It Fl dylib_file Ar install_name:file_name
Specifies that a dynamic shared library is in a different location than its standard location. Use this option 
when you link with a library that is dependent on a dynamic library, and the dynamic library is in a location other 
than its default location. install_name specifies the path where the library normally resides. file_name specifies 
the path of the library you want to use instead. For example, if you link to a library that depends upon the dynamic 
library libsys and you have libsys installed in a nondefault location, you would use this option: 
-dylib_file /lib/libsys_s.A.dylib:/me/lib/libsys_s.A.dylib.
.It Fl prebind
The created output file will be in the prebound format.  This was used in Mac OS X 10.3 and earlier to improve launch performance.  
.It Fl weak_reference_mismatches Ar treatment
Specifies what to do if a symbol is weak-imported in one object file but not weak-imported in another.  The valid 
treatments are: error, weak, or non-weak.  The default is non-weak.
.It Fl read_only_relocs Ar treatment
Enables the use of relocations which will cause dyld to modify (copy-on-write) read-only pages.  The compiler will 
normally never generate such code.  
.It Fl force_cpusubtype_ALL
The is only applicable with -arch ppc.  It tells the linker to ignore the PowerPC cpu requirements (e.g. G3, G4 or G5) encoded
in the object files and mark the resulting binary as runnable on any PowerPC cpu.
.It Fl dylinker_install_name Ar path
Only used when building dyld.
.It Fl no_arch_warnings
Suppresses warning messages about files that have the wrong architecture for the -arch flag
.It Fl arch_errors_fatal
Turns into errors, warnings about files that have the wrong architecture for the -arch flag. 
.It Fl e Ar symbol_name
Specifies the entry point of a main executable.  By default the entry name is "start" which is found in crt1.o which contains
the glue code need to set up and call main().
.It Fl w
Suppress all warning messages
.It Fl final_output Ar name
Specifies the install name of a dylib if -install_name is not used.  This option is used by gcc driver when it is invoked 
with multiple -arch arguments.  
.It Fl arch_multiple
Specifes that the linker should augment error and warning messages with the architecture name.  This option is used by gcc 
driver when it is invoked with multiple -arch arguments.  
.It Fl twolevel_namespace_hints
Specifies that hints should be added to the resulting binary that can help speed up runtime binding by dyld as long as the 
libraries being linked against have not changed.
.It Fl dot Ar path
Create a file a file at the specified path containing a graph of symbol dependencies.  The .dot file can be viewed in GraphViz.
.It Fl keep_relocs
Add section based relocation records to a final linked image.  These relocations are ignored at runtime by dyld.
.It Fl warn_stabs
Print a warning when the linker cannot do a BINCL/EINCL optimzation because the compiler put a bad stab symbol inside
a BINCL/EINCL range.
.El
.Ss Obsolete Options
.Bl -tag
.It Fl segalign Ar value
All segments must be page aligned.  This option is obsolete.
.It Fl seglinkedit
Object files (MH_OBJECT) with a LINKEDIT segment are no longer supported. This option is obsolete.
.It Fl noseglinkedit
This is the default.  This option is obsolete.
.It Fl fvmlib
Fixed VM shared libraries (MH_FVMLIB) are no longer supported. This option is obsolete.
.It Fl preload
Preload executables (MH_PRELOAD) are no longer supported.  This option is obsolete.
.It Fl sectobjectsymbols Ar segname Ar sectname
Adding a local label at a section start is no longer supported.  This option is obsolete.
.It Fl nofixprebinding
The MH_NOFIXPREBINDING bit of mach_headers has been ignored since Mac OS X 10.3.9.  This option is obsolete.
.It Fl noprebind_all_twolevel_modules
Multi-modules in dynamic libraries have been ignored at runtime since Mac OS X 10.4.0.  This option is obsolete.
.It Fl prebind_all_twolevel_modules
Multi-modules in dynamic libraries have been ignored at runtime since Mac OS X 10.4.0.  This option is obsolete.
.It Fl prebind_allow_overlap
When using -prebind, the linker allows overlapping by default, so this option is obsolete.
.It Fl noprebind
LD_PREBIND is no longer supported as a way to force on prebinding, so there no longer needs to
be a command line way to override LD_PREBIND.  This option is obsolete.
.It Fl sect_diff_relocs Ar treatment
This option was an attempt to warn about linking .o files compiled without -mdynamic-no-pic into 
a main executable, but the false positive rate generated too much noise to make the option useful.
This option is obsolete.
.It Fl run_init_lazily
This option was removed in Mac OS X 10.2.
.It Fl single_module
This is now the default so does not need to be specified. 
.It Fl multi_module
Multi-modules in dynamic libraries have been ignored at runtime since Mac OS X 10.4.0.  This option is obsolete.
.It Fl no_dead_strip_inits_and_terms
The linker never dead strips initialzation and termination routines.  They are considered "roots" of the dead strip graph.
.It Fl A Ar basefile
Obsolete incremental load format.  This option is obsolete.
.It Fl b
Used with -A option to strip base file's symbols.  This option is obsolete.
..It Fl M
Obsolete option to produce a load map.  Use -map option instead. 
.It Fl Sn
Don't strip any symbols.  This is the default.  This option is obsolete.
.It Fl Si
Optimize stabs debug symbols to remove duplicates.  This is the default.  This option is obsolete.
.It Fl Sp
Write minimal stabs which causes the debugger to open and read the original .o file for full stabs.
This style of debugging is obsolete in Mac OS X 10.5.  This option is obsolete.
.It Fl X
Strip local symbols that being the 'L'.  This is the default.  This option is obsolete.
.It Fl s
Completely strip the output, including removing the symbol table.  This file format variant is no longer supported.  
This option is obsolete.
.It Fl m
Don't treat multiple definitions as an error.  This is no longer supported. This option is obsolete.
.It Fl y Ns symbol
Display each file in which 
.Ar symbol
is used.  This was previously used to debug where an undefined symbol was used, but the linker now
automatically prints out all usages.  The -why_live option can also be used to display what kept 
a symbol from being dead striped.  This option is obsolete.
.It Fl Y Ar number
Used to control how many occurances of each symbol specifed with -y would be shown.  This option is obsolete.
.It Fl nomultidefs
Only used when linking an umbrella framework.  Sets the MH_NOMULTIDEFS bit in the mach_header.  The MH_NOMULTIDEFS
bit has been obsolete since Mac OS X 10.4.  This option is obsolete.
.It Fl multiply_defined_unused Ar treatment
Previously provided a way to warn or error if any of the symbol definitions in the output file matched any
definitions in dynamic library being linked.  This option is obsolete.
.It Fl multiply_defined Ar treatment
Previously provided a way to warn or error if any of the symbols used from a dynamic library were also 
available in another linked dynamic library.  This option is obsolete.
.It Fl private_bundle
Previously prevented errors when -flat_namespace, -bundle, and -bundle_loader were used and the bundle 
contained a definition that conflicted with a symbol in the main executable.  The linker no longer
errors on such conflicts.  This option is obsolete.
.It Fl noall_load
This is the default.  This option is obsolete.
.It Fl seg_addr_table_filename Ar path
Use 
.Ar path
instead of the install name of the library for matching an entry in the seg_addr_table.  This option is obsolete.
.It Fl sectorder Ar segname sectname orderfile
Replaced by more general -order_file option.
.It Fl sectorder_detail
Produced extra logging about which entries from a sectorder entries were used.  Replaced by -order_file_statistics. 
This option is obsolete. 
.El
.Sh SEE ALSO
as(1), ar(1), cc(1), nm(1), otool(1) lipo(1),
arch(3), dyld(3), Mach-O(5), strip(1), rebase(1)
